package tech.blur.eventhub.repositories;

import tech.blur.eventhub.models.AssignEvent;
import tech.blur.eventhub.models.Event;
import org.springframework.stereotype.Repository;

import java.util.*;

@Repository
public class InMemoryEventRepository implements EventRepository {

    private Map<String, Event> eventCache = new HashMap<>();
    public InMemoryEventRepository() {
        eventCache.put("1", new Event("1", "7", "–ò–ª—å—è", "–ß–µ–ª–æ–≤–µ–∫-–º—É—Ä–∞–≤–µ–π –∏ –û—Å–∞",
                "–°–æ–±–∏—Ä–∞–µ–º—Å—è –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ —Å–µ–∞–Ω—Å–∞ –≤–æ–∑–ª–µ –ö–∏–Ω–æ—Å–∏—Ç–∏ –≤ –°–∏–±–∏—Ä—Å–∫–æ–º –º–æ–ª–ª–µ", "55.038864,82.9612697",
                new ArrayList(Arrays.asList("1")), new ArrayList(Arrays.asList("7")),"1531907100000",
                "1531915380000"));
        eventCache.put("2", new Event("2",  "2", "–°–µ—Ä—ë–∂–∞", "–í—ã—Ö–æ–¥–Ω—ã–µ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
                "–ú–æ–∂–Ω–æ —Å—ä–µ–∑–¥–∏—Ç—å –≤ –∫–∞–∫—É—é –Ω–∏–±—É–¥—å –∏–∑ –±–µ—Å–µ–¥–æ–∫ –≤ –ó–∞–µ–ª—å—Ü–æ–≤—Å–∫–æ–º –ø–∞—Ä–∫–µ. –ì–æ–≤–æ—Ä—è—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ BorcshStarter –º–æ–∂–Ω–æ –µ—â–µ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—Ç–æ-—á—Ç–æ –≤–æ–∑—å–º–µ—Ç –∏ –∫—Ç–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∏—Ç—å. –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –≤–æ–ª–µ–π–±–æ–ª! üèê", "55.0511904,82.8388093",
                new ArrayList(Arrays.asList("2","7", "13")), new ArrayList(Arrays.asList("2")),"1531663200000",
                "1531681200000"));
        eventCache.put("3", new Event("3", "2", "–°–µ—Ä—ë–∂–∞", "–ù–æ—á–Ω—ã–µ –ø–æ–∫–∞—Ç—É—à–∫–∏ –Ω–∞ –≤–µ–ª–∏–∫–∞—Ö",
                "–î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞—Ç–∞–µ–º—Å—è –Ω–æ—á—å—é –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö –ø–æ –ö—Ä–∞—Å–Ω–æ–º—É –ø—Ä–æ—Å–ø–µ–∫—Ç—É –æ—Ç –ó–∞–µ–ª—å—Ü–æ–≤—Å–∫–æ–π üö≤. –í –ø—Ä–∏–Ω—Ü–∏–ø–µ –º–æ–∂–Ω–æ –¥–æ–µ—Ö–∞—Ç—å –¥–æ –û–∫—Ç—è–±—Ä—å—Å–∫–æ–π.", "55.060416,82.91225150000002",
                new ArrayList(Arrays.asList("9")), new ArrayList(Arrays.asList("2")),"1532721600000",
                "1532736000000"));
        eventCache.put("4", new Event("4", "5", "–ú–∞—à–∞", "–ù–æ–≤—ã–π –¥–∏–¥–∂–µ–π –≤ Guilty",
                "–ü–æ–≥–Ω–∞–ª–∏ –≤ Guilty. –ì–æ–≤–æ—Ä—è—Ç —Ç–∞–º –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –¥–∏–¥–∂–µ–π üéâüéâ. –ó–∞—Ç—É—Å–∏–º –Ω–∞ –≤—Å—é –Ω–æ—á—å!", "55.022901,82.92301199999997",
                new ArrayList(Arrays.asList("12")), new ArrayList(Arrays.asList("5")),"1532736000000",
                "1532736000000"));
        eventCache.put("5", new Event("5", "7", "–ò–ª—å—è", "–ù–æ—á—ë–≤–∫–∞ —Å –ø–∞–ª–∞—Ç–∫–∞–º–∏",
                "–î–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä—ë–º—Å—è –∑–∞ –≥–æ—Ä–æ–¥–æ–º. –ú–æ–π –∫–æ—Ä–µ—à –≤–æ–∑—å–º–µ—Ç –≥–∏—Ç–∞—Ä—É. –Ø –∑–Ω–∞—é –æ–¥–∏–Ω –∫–ª–∞—Å—Å–Ω—ã–π –ª–µ—Å–æ–∫ üå≥üå≥. –¢–æ–ª—å–∫–æ —è —Å –ø–∞–ª–∞—Ç–∫–∞–º–∏ –Ω–µ –¥—Ä—É–∂—É üèïÔ∏è, –¥–∞–≤–∞–π—Ç–µ –≤ –ë—é—Ä–æ –¥–æ–±—Ä—ã—Ö –¥–µ–ª –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–º–æ—á—å?", "55.11402622375434,83.16025904528817",
                new ArrayList(Arrays.asList("2", "5", "10")), new ArrayList(Arrays.asList("7", "6")),"1533279600000",
                "1533394800000"));
    }


    @Override
    public Event fetchEvent(final String id) {
        return eventCache.get(id);
    }

    @Override
    public Event updateEvent(final Event event) {
        eventCache.put(event.getId(), event);
        return event;
    }

    @Override
    public ArrayList<Event> searchEvent(String name) {
        ArrayList<Event> events = new ArrayList<>();
        for (int i = 1; i<=eventCache.size(); i++){
            if ((eventCache.get(Integer.toString(i)).getName().toLowerCase()).contains(name.toLowerCase())){
                events.add(eventCache.get(Integer.toString(i)));
            }
        }
        return events;
    }

    @Override
    public ArrayList<Event> getEventsByUser(String host) {
        ArrayList<Event> events = new ArrayList<>();
        for (int i = 1; i<=eventCache.size(); i++){
            if ((eventCache.get(Integer.toString(i)).getHost().toLowerCase()).contains(host.toLowerCase())){
                events.add(eventCache.get(Integer.toString(i)));
            }
        }
        return events;
    }

    @Override
    public ArrayList<Event> getAssignedEvents(String id) {
        ArrayList<Event> events = new ArrayList<>();
        for (int i = 1; i<=eventCache.size(); i++){
            if (eventCache.get(Integer.toString(i)).getGuests().contains(id)){
                events.add(eventCache.get(Integer.toString(i)));
            }
        }
        return events;
    }

    @Override
    public ArrayList<Event> getEventsByTag(String id) {
        ArrayList<Event> events = new ArrayList<>();
        for (int i = 1; i<=eventCache.size(); i++){
            if (eventCache.get(Integer.toString(i)).getTags().contains(id)){
                events.add(eventCache.get(Integer.toString(i)));
            }
        }
        return events;
    }

    @Override
    public void deleteEvent(final String id) {
        eventCache.remove(id);
    }

    @Override
    public Event createEvent(final Event event) {
        event.setId(Integer.toString(eventCache.size()+1));
        eventCache.put(event.getId(), event);
        return event;
    }

    public Event assignEvent (final AssignEvent assignEvent){

        if (!eventCache.get(assignEvent.getEvent_id()).getGuests().contains(assignEvent.getUser_id()))
            eventCache.get(assignEvent.getEvent_id()).getGuests().add(assignEvent.getUser_id());

        return eventCache.get(assignEvent.getEvent_id());
    }


    @Override
    public Collection<Event> getAllEvents() {
        return eventCache.values();
    }
}
